# -*- coding: utf-8 -*-
"""geometria

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VtAmeNqUYU2Q9TGNxvWUGdTrMShVgQR_
"""

import tkinter as tk
from tkinter import ttk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
#the following 3 lines install, start a virtual X server and export the display
#so that your code can connect to the X server and render the GUI
!apt-get install -y xvfb
!Xvfb :1 -screen 0 1024x768x24 &
!export DISPLAY=:1


class GeometriaInteractiva:
    def __init__(self, root):
        self.root = root
        self.root.title("Explorador de Geometría Interactiva")

        # Configuración de la interfaz
        self.crear_interfaz()

    def crear_interfaz(self):
        # Menú de selección de figuras
        ttk.Label(self.root, text="Selecciona una figura:").pack(pady=10)
        self.figura_seleccionada = tk.StringVar()
        opciones_figuras = ["Cuadrado", "Círculo", "Triángulo"]
        self.menu_figuras = ttk.Combobox(self.root, textvariable=self.figura_seleccionada, values=opciones_figuras)
        self.menu_figuras.pack(pady=5)
        self.menu_figuras.bind("<<ComboboxSelected>>", self.mostrar_figura)

        # Área de visualización
        self.figura_canvas = None

    def mostrar_figura(self, event):
        figura = self.figura_seleccionada.get()
        if self.figura_canvas:
            self.figura_canvas.get_tk_widget().pack_forget()

        if figura == "Cuadrado":
            self.mostrar_cuadrado()
        elif figura == "Círculo":
            self.mostrar_circulo()
        elif figura == "Triángulo":
            self.mostrar_triangulo()

    def mostrar_cuadrado(self):
        # Limpieza y preparación del gráfico
        fig, ax = plt.subplots()
        ax.clear()

        # Dibujar cuadrado básico
        lado = 5
        x = [0, lado, lado, 0, 0]
        y = [0, 0, lado, lado, 0]
        ax.plot(x, y)
        ax.set_aspect('equal', 'box')
        ax.set_title(f"Cuadrado de lado {lado}")

        # Mostrar en canvas
        self.figura_canvas = FigureCanvasTkAgg(fig, master=self.root)
        self.figura_canvas.draw()
        self.figura_canvas.get_tk_widget().pack()

    def mostrar_circulo(self):
        fig, ax = plt.subplots()
        ax.clear()

        # Dibujar círculo básico
        circle = plt.Circle((0.5, 0.5), 0.4, fill=False)
        ax.add_artist(circle)
        ax.set_xlim(0, 1)
        ax.set_ylim(0, 1)
        ax.set_title("Círculo con radio 0.4")

        self.figura_canvas = FigureCanvasTkAgg(fig, master=self.root)
        self.figura_canvas.draw()
        self.figura_canvas.get_tk_widget().pack()


    def mostrar_triangulo(self):
        fig, ax = plt.subplots()
        ax.clear()

        # Dibujar triángulo básico
        x = [0, 1, 0.5, 0]
        y = [0, 0, 1, 0]
        ax.plot(x, y)
        ax.set_aspect('equal', 'box')
        ax.set_title("Triángulo equilátero")

        self.figura_canvas = FigureCanvasTkAgg(fig, master=self.root)
        self.figura_canvas.draw()
        self.figura_canvas.get_tk_widget().pack()

if __name__ == "__main__":
    root = tk.Tk()
    app = GeometriaInteractiva(root)
    root.mainloop()